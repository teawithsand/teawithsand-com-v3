@use "@app/styles/defines.scss" as def;
@use "@app/styles/scrollbar.scss" as scrollbar;

// Small note at the beginning:
// This CSS is fiesta of chrome behaving different than firefox
// and me trying to somewhat make it work in both browsers
// I've found behavior, which differs between chrome and ff 22(sic!) times
// which is my web dev norm ever(take into consideration that I've never been testing on IE)

// Required, otherwise webkit(safari/chrome) will display blurry images while downscaling
//  on the other hand, in firefox it works ok as-is
//
//  BTW I also noticed that it changes depending on image used
//  while lena scales ok
//  this anime picture
//  https://upload.wikimedia.org/wikipedia/commons/thumb/0/02/Wikipe-tan_in_Different_Anime_Styles.png/1024px-Wikipe-tan_in_Different_Anime_Styles.png
//  Works best with image-rendering: auto on ff
//  and with -webkit-optimize-contrast on chrome
@mixin downscaled-image {
	// See
	// https://developer.mozilla.org/en-US/docs/Web/CSS/image-rendering
	image-rendering: auto;
	image-rendering: -webkit-optimize-contrast;
	// see comments above
	// image-rendering: smooth;
	// image-rendering: high-quality;
}

$gallery-default-max-height: 75vh;
$overlay-width: 20%;

.gallery {
	max-height: $gallery-default-max-height;
	display: grid;
	grid-template-columns: minmax(auto, 100vw);
	overflow: hidden;
	grid-template-rows: minmax(0, 1fr) minmax(100px, 0.2fr); // for older browsers with no min
	grid-template-rows: minmax(0, 1fr) minmax(Min(100px, 10vh), 0.2fr);

	background-color: black;
	color: white;

	row-gap: map-get(def.$spacers, 2);
	padding: map-get(def.$spacers, 2);
	// FIXME(teawithsand): scrollbar height is not known on firefox
	// since it can't be precisely set there
	// only normal and thin scrollbar are there
	// this approximately works and looks ok when I've tested it
	padding-bottom: calc(map-get(def.$spacers, 2) - scrollbar.$height);

	user-select: none;
	::selection {
		background: transparent;
	}
	
	&--max-height-35 {
		max-height: 35vh;
	}

	&--max-height-50 {
		max-height: 50vh;
	}

	&--max-height-75 {
		max-height: 50vh;
	}

	&--max-height-100 {
		max-height: 50vh;
	}

	&--fullscreen {
		max-height: 100vh!important;
		height: 100vh!important;

		position: fixed;
	
		top: 0;
		left: 0;
		z-index: 10000; // Big z-index to make this element display on top of others
	}
}

.main-bar {
	overflow: hidden;
	grid-row: 1;
	grid-column: 1;

	display: grid;
	grid-template-columns: auto;
	grid-template-rows: auto;

	width: 100%;
	height: 100%;

	&__displayed-entry-wrapper {
		pointer-events: none;

		z-index: 0;
		grid-row: 1;
		grid-column: 1;

		overflow: hidden;

		width: 100%;
		height: 100%;

		margin: auto;

		img {
			@include downscaled-image();
			width: fit-content;
			height: fit-content;
			max-width: 100%;
			max-height: 100%;
			object-fit: contain;
		}
	}

	&__hidden-elements {
		z-index: 0;
		grid-row: 1;
		grid-column: 1;

		display: grid;
		visibility: hidden;
		overflow: hidden;

		width: 100%;
		height: 100%;

		> * {
			grid-row: 1;
			grid-column: 1;

			width: 100%;
			height: 100%;
		}

		img {
			@include downscaled-image();
			width: fit-content;
			height: fit-content;
			max-width: 100%;
			max-height: 100%;
			object-fit: contain;
		}
	}

	// TODO(teawithsand): use less hacky solutions like svg images instead
	// of ::before content and flexbox for centering.
	@mixin overlay {
		grid-row: 1;
		grid-column: 1;
		width: $overlay-width;
		background-color: rgba(255, 255, 255, 0.3);

		box-sizing: border-box;
		height: 100%;

		overflow: hidden;

		display: flex;
		align-items: center;
		justify-content: center;
		vertical-align: middle;
		text-align: center;

		font-size: 20em;

		transition: opacity 300ms;
		opacity: 0;
		z-index: 1;

		cursor: pointer;

		// TODO(teawithsand): fix centering arrows
		// looks like text is not centered to baseline but to
		// it's top instead
		//
		// Or do it like normal person would do
		// and just use svg
		//
		// But I am too lazy to use svg
		// :3
		font-family: monospace, monospace;

		&:hover {
			opacity: 1;
		}
	}

	&__left-overlay {
		@include overlay();
		margin-right: auto;

		&::before {
			content: "←";
		}
	}

	&__right-overlay {
		@include overlay();
		margin-left: auto;

		&::before {
			content: "→";
		}
	}
}

.bottom-bar {
	$this: &;

	@include scrollbar.pretty-scrollbar-light();

	height: 100%;
	width: 100%; // must not be 100% for element centering
	overflow-x: scroll;
	overflow-y: hidden;

	grid-row: 2;
	grid-column: 1;

	// Screw grid
	// I could't make it work
	// In grid/flex images
	// even when object-fit: contain is set
	// still have their "original"(like object-fit: cover) width
	// which makes it impossible to handle it sensibly
	// so display inline/inline-block is used instead.

	display: inline;
	text-align: center;

	&__entry-wrapper {
		display: inline;
		overflow: hidden;

		&--active {
			img {
				border: 1px solid whitesmoke;
			}
		}

		// It has to be moved directly to element
		// since we are inline
		// border-radius: map-get(def.$spacers, 1);
		// border: 1px solid white;
		// and inline-block in ff works as-if it was block element, when it comes to width computation
		// unlike chrome...
		// border-radius: map-get(def.$spacers, 1);
		// border: 1px solid white;

		max-width: 33vw;
		height: 100%;
		margin-left: map-get(def.$spacers, 1);
		margin-right: map-get(def.$spacers, 1);

		img {
			border-radius: map-get(def.$spacers, 1);
			border: 1px solid white;

			@include downscaled-image();
			object-fit: cover;
			height: 100%;

			max-width: 33vw;
			min-width: 5vh; // for super thin images
			background-color: rebeccapurple;
		}
	}

	&--clickable {
		#{$this}__entry-wrapper {
			cursor: pointer;
		}
	}
}